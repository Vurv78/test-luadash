local slice = require("src.lua.array.slice")

describe("array slicing", function()
	describe("exclusivity", function()
		it("should not include the ending element", function()
			local result = slice({ 1, 2, 3 }, 1, 3)
			expect(result).toEqual({ 1, 2 })
		end)
	end)

	describe("default arguments", function()
		it("should work with no arguments provided", function()
			local result = slice()
			expect(result).toEqual({})
		end)

		it("should work without start or ending provided", function()
			local result = slice({ 1, 2, 3 })
			expect(result).toEqual({ 1, 2, 3 })
		end)

		it("should work without ending provided", function()
			local result = slice({ 1, 2, 3 }, 2)
			expect(result).toEqual({ 2, 3 })
		end)

		it("should work with just ending provided", function()
			local result = slice({ 1, 2, 3 }, nil, 2)
			expect(result).toEqual({ 1 })
		end)
	end)

	describe("negative indices", function()
		it("should work with negative start and ending", function()
			local result = slice({ 2, 4, 6 }, -3, -1)
			expect(result).toEqual({ 2, 4 })
		end)
	end)

	describe("normal cases", function()
		it("should work with zeroes", function()
			local result = slice({ -2, -3, -4 }, 0, 0)
			expect(result).toEqual({})
		end)

		it("should work with starting zero", function()
			local result = slice({ -2, -3, -4 }, 0, 2)
			expect(result).toEqual({ -2 })
		end)
	end)

	describe("invalid combinations", function()
		it("should not work with start past ending", function()
			local result = slice({ 10, 20, 30, 40 }, 5, 3)
			expect(result).toEqual({})
		end)

		it("should not work with negative start past ending", function()
			local result = slice({ 10, 20, 30, 40 }, -1, 3)
			expect(result).toEqual({})
		end)
	end)
end)